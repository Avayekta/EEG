function [eeg,rtbg,rmain,orimainIDX,afbs,mainsourceIDX,afms,bsIDX,bsoriIDX,grid] = EEGg(Fs,n_channel,t_end,n,na,nb,att,toler,lim,range,report,NOISE_SNR)
%Fs: sampling frequency ratio for example Fs = 512; 
%n_channel: number of EEG channel acceptable values are 16,32,64,128
%n_t: duration of EEG in seconds
%n: number of source you want to have specific orientation NOT perpendicular
%na: number of main active source
%nb: number of background noise 
%att: ratio of attenuation 
%toler: The EEG may be generated by some element of small absolute
%value(because of attenuation in background noise)
    %toler will calculate the rank of matrix by tolerance of toler value
    %if you don't have any idea you can use choose -1 for toler so the default value will be toler=0.1; 
% default parameter for background noise
    %if you choose default mode insert lim=-1 & range=-1 as an input and the
    %default value will be lim=30 & range=40
    % lim: limit of diffrence between grid.pos(:,2) & grid.pos(:,3) for
    % choosing as background noise 
    % range: distance between each grid.pos(:,1) in default background noise
    % report: it's logical value (0 or 1) if you use 1 you'll have report
    % indexes, active functions, and their orientation 
    % NOISE_SNR if you want to add noise write the SNR, if not -1
    %**remember orimainIDX,afbs,mainsourceIDX,afms,bsIDX,bsoriIDX would be
    %available if report input was 1
    %% orientation part
load Dip_ori_perpendicular
    D=Dip_ori_perpendicular;
    if n<=size(Dip_ori_perpendicular,1) && n>0       
        for i1=1:n
            fprintf('For source %d .\n',i1);
            prompt1 = "type index(between 1 and 2052) you want to specify it's orientation? ";
            a(i1,1) = input(prompt1);
            prompt2="type orientation you want to specify it's orientation in this form [x y z] in radian? ";
            D(a(i1,1),:)=input(prompt2); %D is new orientation matrix       
        end
    end
    %% eeg simulation for main source
load('fasticaData.mat')
switch n_channel
    case 16
load('grid16.mat')
    case 32
load('grid32.mat')
    case 64
load('grid64.mat')
    case 128
load('grid128.mat')
    otherwise
        disp('the channel number is not acceptable')
end
amp=1;% you can change it but amp=1 is closer to real data
eeg=zeros(n_channel,t_end*Fs);
for i2=1:na
    fprintf('For main active source %d .\n',i2);
    prompt3 = "type index(between 1 and 2052) you want to specify as an active source? ";
    mainsourceIDX(i2,1) = input(prompt3);
    stp(i2,1)=randi(size(fasticaData{1,1},2)-t_end*Fs);%start point
    if stp(i2,1)>(t_end*Fs)
        afms(i2,:)=att*fasticaData{1,randi(size(fasticaData,2))}(randi(size(fasticaData{1,1},1)),[abs(t_end*Fs-stp(i2,1)-1):stp(i2,1)]);
        eeg=eeg+grid.leadfield{mainsourceIDX(i2,1)}*D(mainsourceIDX(i2,1),:)'*afms(i2,:);
    end
    if stp(i2,1)<(t_end*Fs)
        afms(i2,:)=att*fasticaData{1,randi(size(fasticaData,2))}(randi(size(fasticaData{1,1},1)),[abs(stp(i2,1):t_end*Fs+stp(i2,1)-1)]);
        eeg=eeg+grid.leadfield{bsdidx(i2,1)}*D(mainsourceIDX(i2,1),:)'*afms(i2,:);
    end
    rmain(i2,1)=rank(cov(eeg')) % rank that have been produced by main sources
end
%% eeg simulation for background source
if toler==-1
    toler=0.1;
end
%manual mode
if nb~='default'
for i3=1:nb
    fprintf('For background source %d .\n',i3);
    prompt4 = "type index(between 1 and 2052) of source you want to specify as an background source? ";
    bs(i3,1) = input(prompt4);
    stp2(i3,1)=randi(size(fasticaData{1,1},2)-t_end*Fs);%start point
if stp2(i3,1)>(t_end*Fs)
    afbs(i3,:)=att*fasticaData{1,randi(size(fasticaData,2))}(randi(size(fasticaData{1,1},1)),[(abs(t_end*Fs-stp2(i3,1)-1)):stp2(i3,1)]);
        eeg=eeg+grid.leadfield{bs(i3,1)}*D(bs(i3,1),:)'*afbs(i3,:);
        bsoriIDX=D(bs(i3,1),:);

end
if stp2(i3,1)<(t_end*Fs)
    afbs(i3,:)=att*fasticaData{1,randi(size(fasticaData,2))}(randi(size(fasticaData{1,1},1)),[abs(stp2(i3,1):t_end*Fs+stp2(i3,1)-1)]); 
    eeg=eeg+grid.leadfield{bs(i3,1)}*D(bs(i3,1),:)'*afbs(i3,:);
    bsoriIDX=D(bs(i3,1),:);

end
rbg(i3,1)=rank(cov(eeg')) %rank that have been produced by main & background sources
rtbg(i3,1)=rank(cov(eeg'),toler) %rank that have been produced by main & background sources with toler
end
bsIDX=bs;
end
%default mode 
if nb=='default'
    if lim==-1
        lim=30;
    end
difrenceS=abs(grid.pos(:,2)-grid.pos(:,3))
for i5=1:size(difrenceS,1)
    if difrenceS(i5,1)<lim
        difrenceS(i5,1)=0;
    end
end
i6=1;
i8=1;
rbg(i6,1)=rmain(end,1);
rtbg(i6,1)=rmain(end,1);
    if range==-1
        range=40;
    end
 i12=1;
    for i5=1:size(difrenceS,1)
        if difrenceS(i5,1)~=0
            bsdidx(i6,1)=i5;
            stp3(i6,1)=randi(size(fasticaData{1,1},2)-t_end*Fs);%start point
            for i7=1:na
                if bsdidx(i6,1)==mainsourceIDX(i7,1)
                    bsdidx(i6,1)=0;
                end
            end
            if rtbg(i8,1)<n_channel && bsdidx(i6,1)~=0
                if stp3(i6,1)>=(t_end*Fs)
                    if report==1
                    bsIDX(i12,:)=bsdidx(i6,1);
                    bsoriIDX=D(bsdidx(i6,1),:);%correspond to bsIDX
                    end
                    afbs(i12,:)=att*fasticaData{1,randi(size(fasticaData,2))}(randi(size(fasticaData{1,1},1)),[abs(t_end*Fs-stp3(i6,1)-1):stp3(i6,1)]);                    
                    eeg=eeg+grid.leadfield{bsdidx(i6,1)}*D(bsdidx(i6,1),:)'*afbs(i12,:);
                    i12=i12+1;
                    i8=i8+1;
                end
                if stp3(i6,1)<(t_end*Fs)
                    if report==1
                    bsIDX(i12,:)=bsdidx(i6,1);
                    bsoriIDX=D(bsdidx(i6,1),:); %correspond to bsIDX
                    end
                    afbs(i12,:)=att*fasticaData{1,randi(size(fasticaData,2))}(randi(size(fasticaData{1,1},1)),[abs(stp3(i6,1):t_end*Fs+stp3(i6,1)-1)]);
                    eeg=eeg+grid.leadfield{bsdidx(i6,1)}*D(bsdidx(i6,1),:)'*afbs(i12,:);
                    i12=i12+1;
                    i8=i8+1;
                end
                rbg(i8,1)=rank(cov(eeg'))  %rank that have been produced by main & background sources
                rtbg(i8,1)=rank(cov(eeg'),toler) %rank that have been produced by main & background sources with toler
            end
            i6=i6+range;
        end
    end
end
if report==1
    for i11=1:size(mainsourceIDX,1)
    orimainIDX(i11,:)=D(mainsourceIDX(i11,:),:);%correspond to IDX in mainsourceIDX
    end
end
if NOISE_SNR~=-1
    eeg=awgn(eeg,NOISE_SNR)
    rankwithoise=rank(eeg,toler)
end
end
